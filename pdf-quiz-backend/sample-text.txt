Sample Text for PDF Quiz Generation

Introduction to Machine Learning
Machine learning is a subset of artificial intelligence that focuses on the development of algorithms and statistical models that enable computer systems to improve their performance on a specific task through experience, without being explicitly programmed.

Key Concepts:
1. Supervised Learning - Learning with labeled data
2. Unsupervised Learning - Finding patterns in unlabeled data  
3. Reinforcement Learning - Learning through trial and error

Applications:
- Image recognition
- Natural language processing
- Recommendation systems
- Fraud detection

Benefits:
Machine learning can process large amounts of data quickly, identify patterns humans might miss, and make predictions or decisions with minimal human intervention.

Challenges:
- Data quality issues
- Overfitting
- Interpretability
- Ethical considerations



# üß† **Backend Flow: PDF Upload ‚Üí Text Extraction ‚Üí Gemini Quiz Generator**

This backend handles user-uploaded PDF files, extracts readable text from them, and generates multiple-choice quizzes using Google Gemini AI. Below is a **step-by-step theoretical breakdown** of how it works, including **which function or file handles each part**.

---

## 1Ô∏è‚É£ **PDF Upload (Multer Middleware)**

**üìÅ File:** `upload.js`
**üîß Functionality:** Handled internally by Multer via `multer.diskStorage`

### üß© What it does:

* Accepts only PDF files uploaded by users.
* Saves them to a local `uploads/` folder.
* Renames files using the format `pdf-<timestamp>.pdf`.
* Rejects files over a certain size (5MB by default).

**‚úÖ Function responsible:**

> ‚öôÔ∏è This is handled by `multer()` configuration. You use this in routes via `upload.single('pdf')`.

---

## 2Ô∏è‚É£ **Extract Text from PDF**

**üìÅ File:** `extractTextFromPdf.js`
**üîß Function:** `extractTextFromPDF(filePath)`

### üß© What it does:

* Takes the uploaded PDF file's path.
* Reads the file using `fs.readFileSync`.
* Uses `pdf-parse` to extract the text content.
* Falls back to a second parsing method with relaxed options if needed.
* Throws an error if the PDF is empty or contains no readable text.

**‚úÖ Function responsible:**

> `extractTextFromPDF(filePath)`
> This function is called after Multer saves the file, using the `req.file.path` as input.

---

## 3Ô∏è‚É£ **(Optional) Content Moderation Check**

**üìÅ File:** `contentModeration.service.js`
**üîß Function:** `checkContentPolicy(text)`

### üß© What it does:

* Analyzes the extracted text for inappropriate or unsafe content.
* Prevents NSFW, violent, hate, or harmful material from being turned into quizzes.
* Returns an object like `{ isAppropriate: true/false, reason: "..." }`.

**‚úÖ Function responsible:**

> `checkContentPolicy(text)`
> Called before sending the prompt to Gemini.

---

## 4Ô∏è‚É£ **Generate Quiz from Text using Gemini AI**

**üìÅ File:** `generateQuizFromText.js`
**üîß Function:** `generateQuizFromText(text)`

### üß© What it does:

* Prepares a clear prompt instructing Gemini to:

  * Create 5‚Äì10 MCQs
  * Include 4 answer options per question
  * Identify the correct answer
  * Add metadata like quiz title, category, difficulty, and description
* Sends the prompt to Gemini (Google Generative AI).
* Receives the text-based AI response.

**‚úÖ Function responsible:**

> `generateQuizFromText(text)`
> This is the central brain of your system. It communicates directly with Gemini using Google‚Äôs `@google/generative-ai` SDK.

---

## 5Ô∏è‚É£ **Clean and Parse Gemini Response**

**üìÅ Part of:** `generateQuizFromText.js`
**üîß Done inside:** `generateQuizFromText(text)`

### üß© What it does:

* AI often returns JSON wrapped in extra text.
* The function extracts only the valid JSON part from the AI response.
* Parses it into a JavaScript object.
* Throws an error if parsing fails.

**‚úÖ Function responsible:**

> Still `generateQuizFromText(text)`
> The logic to extract and parse JSON lives inside this same function.

---

## 6Ô∏è‚É£ **Cleanup (Optional)**

**üìÅ Inside route handler**
**üîß Line:** `fs.unlinkSync(req.file.path)`

### üß© What it does:

* Deletes the uploaded PDF after processing.
* Keeps server storage clean and avoids clutter.

**‚úÖ Responsibility:**

> Route-level logic (e.g., in `quizRoutes.js` or `app.js`)
> You manually call `fs.unlinkSync()` after calling `generateQuizFromText()`.

---

## 7Ô∏è‚É£ **Return Final Quiz to Frontend**

### üß© What it contains:

* Structured quiz in JSON format:

  * Title
  * Category
  * Difficulty
  * Description
  * List of questions with options and correct answers

**‚úÖ Responsibility:**

> Your route handler (e.g., inside Express `POST /upload`) sends this final object back as a JSON response using `res.json(parsedQuiz)`.

---

## ‚úÖ Summary Table of Flow + Functions

| Step                              | Function / File                          | Responsibility                    |
| --------------------------------- | ---------------------------------------- | --------------------------------- |
| Upload PDF                        | `upload.js` (Multer middleware)          | Accept and store the file         |
| Extract Text from PDF             | `extractTextFromPDF()`                   | Read file, get clean text         |
| Check for inappropriate content   | `checkContentPolicy()`                   | Block offensive material          |
| Generate quiz from extracted text | `generateQuizFromText()`                 | Use AI to create quiz             |
| Parse and clean AI response       | (inside `generateQuizFromText()`)        | Extract JSON from raw AI response |
| Delete uploaded file (optional)   | `fs.unlinkSync()` in route               | Remove file from disk             |
| Return final quiz                 | Express route response (`res.json(...)`) | Send structured quiz to frontend  |

---

## üß† Ideal Developer Flow

1. Upload a PDF using `/upload` route.
2. Backend saves the file ‚Üí reads ‚Üí extracts text.
3. Gemini AI generates quiz ‚Üí response is cleaned.
4. Quiz is returned to frontend in usable format.
5. Optionally store quiz in DB or render it on UI.



